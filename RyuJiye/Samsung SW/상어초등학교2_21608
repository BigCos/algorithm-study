import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;
import java.math.*;
 
   
        
public class Main {

    private static class location {
        private int row;
        private int col;

        public location(int r, int c){
        this.row = r;
        this.col = c;
        }

        public int getRow(){
            return this.row;
        }

        public int getCol(){
            return this.col;
        }

        public void set(int r, int c){
            this.row = r;
            this.col = c;
        }
    }

	public static void main(String[] args) throws IOException {
 
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

	
		int N = Integer.parseInt(br.readLine());
        int sNum = N*N; //학생수
        Map<Integer, location> loc = new HashMap<>(); //Map<번호, 위치>
        int[][] around = new int[N+2][N+2];//around[row][col] = 인접한 비어있는 칸 개수
        int[][] likeFriend = new int[sNum+1][4]; //likeFriend[4][i] = 4번 학생이 좋아하는 친구 
        int[][] isNull = new int[N+2][N+2]; //학생이 자리를 선택하면 0, 자리가 비어있으면 1

        //isNull 초기화 
        for(int i = 0; i < N+2;i++){
            for(int j = 0; j < N+2;j++){
            isNull[i][j] = 1;
            }
        }

        //테두리 0으로 채우기, isNll = 0 초기화
        for(int n = 0; n <= N+1; n++){
            around[0][n] = 0;
            around[N+1][n] = 0;
            isNull[0][n] = 0;
            isNull[N+1][n] = 0;
        }
        for(int n = 1; n <= N; n++){
            around[n][0] = 0;
            around[n][N+1] = 0;
            isNull[n][0] = 0;
            isNull[n][N+1] = 0;
        }

        //안쪽 채우기
        around[1][1] = 2; 
        around[1][N] = 2;
        around[N][1] = 2;
        around[N][N] = 2;

        for(int n = 2; n < N; n++){
            around[1][n] = 3;
            around[N][n] = 3;
            around[n][1] = 3;
            around[n][N] = 3;
        }

        for(int n = 2; n < N; n++){
            for(int k = 2; k < N; k++){
                around[n][k] = 4;
            }
        }


        //첫번째 학생
        String[] input = br.readLine().split(" ");
        Integer currentS =  Integer.parseInt(input[0]);
        loc.put(currentS, new location(2,2)); //첫번째 학생의 위치는 [2][2]
        isNull[2][2] = 0;
        //인접자리의 '인접 비어있는 자리 수' 1감소
        --around[2-1][2];
        --around[2][2-1];
        --around[2+1][2];
        --around[2][2+1]; 
        //좋아하는 친구 저장
        for(int i = 1; i<5;i++){
            likeFriend[currentS][i-1] = Integer.parseInt(input[i]);
        }

        //나머지 학생들 자리 배정
        int circle = sNum-1;
        while(circle-- > 0){ 
            input = br.readLine().split(" ");
            int[] intInput = new int[5];
            for(int i = 0; i < 5; i++){
                intInput[i] = Integer.parseInt(input[i]);
            }

            currentS =  intInput[0]; //현재 학생 번호 저장
            int[][] nearLikeFrdNum = new int[N+2][N+2]; //인접한 자리에 위치한 좋아하는 학생 수
            for(int i = 0; i < N+2;i++){
                for(int j = 0; j < N+2;j++){
                nearLikeFrdNum[i][j] = 1;
                }   
            }

            //좋아하는 친구 저장
            for(int i = 0; i<4;i++){
                likeFriend[currentS][i] = intInput[i+1];
            }

            //좋아하는 친구와 인접한 칸에 ++ 
            location currentFrd;

            for(int i = 1; i < 5; i++){
                currentFrd = loc.get(intInput[i]); //좋아하는 친구가 자리를 배정 받았는지 확인
                if(currentFrd != null){
                    int row = currentFrd.getRow();
                    int col = currentFrd.getCol();
                    ++nearLikeFrdNum[row-1][col];
                    ++nearLikeFrdNum[row+1][col];
                    ++nearLikeFrdNum[row][col-1];
                    ++nearLikeFrdNum[row][col+1];
                }
            }

            for(int i = 0; i < N+2;i++){
                for(int j = 0; j < N+2;j++){
                nearLikeFrdNum[i][j] *= isNull[i][j]; //원소의 수가 높은 자리에 학생을 배정, 따라서 이미 배정받은 자리의 원소는 0으로 업데이트해야됨 
                }
            }
            
            //학생이 들어갈 자리 정하기 
            int max = 0;
            location currentLoc = new location(1,1);
            
            for(int i = 1; i < N+1; i++){
                for(int j = 1; j < N+1; j ++){
                    if(nearLikeFrdNum[i][j] == max){
                        if(around[i][j] > around[currentLoc.getRow()][currentLoc.getCol()]){
                            currentLoc.set(i,j);
                        }
                    }
                    else if(nearLikeFrdNum[i][j] > max){
                        max = nearLikeFrdNum[i][j];
                        currentLoc.set(i, j);
                    } 
                }
            }

            loc.put(intInput[0],currentLoc);
            int r = currentLoc.getRow();
            int c = currentLoc.getCol();
            --around[r-1][c];
            --around[r][c-1];
            --around[r+1][c];
            --around[r][c+1];
            isNull[currentLoc.getRow()][currentLoc.getCol()] = 0; //해당 자리는 비어있지 않음
        }
        

        //점수 내기
        int scoreSum = 0;
        for(int i = 1; i < sNum+1; i ++){ //학생번호 순서대로 score계산
            int score  = 0;
            location stu = loc.get(i);
            int r1 = stu.getRow();
            int c1 = stu.getCol();
            for(int k = 0; k < 4; k++){
                location frd = loc.get(likeFriend[i][k]);
                int r2 = frd.getRow();
                int c2 = frd.getCol();
                if(Math.pow(r1-r2,2) + Math.pow(c1-c2,2) == 1){
                 ++score;
                }
            }
            if(score != 0){
                  scoreSum += Math.pow(10,score-1);
                }
        }
        System.out.println(scoreSum); 
    }
}
